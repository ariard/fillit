/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_solve.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mleroy <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/11/17 22:07:07 by mleroy            #+#    #+#             */
/*   Updated: 2016/11/18 14:38:50 by mleroy           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include "fillit.h"

void	ft_erase_it(char **square, t_tetra **tetra, t_info *info)
{
	ERASE(0) = '.';
	ERASE(1) = '.';
	ERASE(2) = '.';
	ERASE(3) = '.';
}

void	ft_put_it(char **square, t_tetra **tetra, t_info *info)
{
	PUT(0) = (*tetra)[info->count].print;
	PUT(1) = (*tetra)[info->count].print;
	PUT(2) = (*tetra)[info->count].print;
	PUT(3) = (*tetra)[info->count].print;
}

int		ft_can_i_put(char **square, t_tetra **tetra, t_info *info)
{
	if ((CAN_I(0) == '.') && (CAN_I(1) == '.')
			&& (CAN_I(2) == '.') && (CAN_I(3) == '.'))
	{
		return (1);
	}
	else
		return (0);
}

int		ft_solve(char **square, t_tetra **tetra, t_info *info)
{
	info->i = 0;
	info->j = 0;
	if (square != NULL && tetra != NULL)
	while (info->count < info->nb)
	{
		if (ft_can_i_put(square, tetra, info) == 1)
		{
			ft_putstr("placement\n");
			ft_put_it(square, tetra, info);
			(*tetra)[info->count].ci = (info->i) + (*tetra)->shape[0].y;
			(*tetra)[info->count].cj = (info->j) + (*tetra)->shape[0].x;
			info->i = 0;
			info->j = 0;
			printf("info.count = %i\n", info->count);
			info->count += 1;
		}
		else if (info->j < info->size)
		{
			info->j += 1;
		}
		else if (((info->j % info->size) == 0) && ((info->i) < (info->size - 1)))
		{
			info->j = 0;
			info->i += 1;
		}
		else if ((info->j == info->size - 1) && (info->i == info->size - 1))
		{
			info->count -= 1;
			if (info->count < 0)
				return (0);
			if ((*tetra)[info->count].ci < info->size)
			{
				(*tetra)[info->count].ci += 1;
			}
			else if ((((*tetra)[info->count].cj) % (info->size) == 0)
						&& (((*tetra)[info->count].ci < (info->size - 1))))
			{
				(*tetra)[info->count].cj = 0;
				(*tetra)[info->count].ci += 1;
			}
			else if ((*tetra)[info->count].cj == (info->size - 1)
						&& (*tetra)[info->count].ci == (info->size - 1))
			{
			
			}
			//effacement du tetra d'avant'
		}
	}
	return (1);
}
