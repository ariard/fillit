/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_solve.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mleroy <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/11/17 22:07:07 by mleroy            #+#    #+#             */
/*   Updated: 2016/11/18 17:50:58 by mleroy           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include "fillit.h"

void	ft_erase_it(char **square, t_tetra **tetra, t_info *info)
{
	ERASE(0) = '.';
	ERASE(1) = '.';
	ERASE(2) = '.';
	ERASE(3) = '.';
}
void	ft_put_it(char **square, t_tetra **tetra, t_info *info)
{
	PUT(0) = (*tetra)[info->count].print;
	PUT(1) = (*tetra)[info->count].print;
	PUT(2) = (*tetra)[info->count].print;
	PUT(3) = (*tetra)[info->count].print;
}

void	ft_store_add(t_tetra **tetra, t_info *info)
{
	(*tetra)[info->count].shape[0].y += (info->i);
	(*tetra)[info->count].shape[0].x += (info->j);
	(*tetra)[info->count].shape[1].y += (info->i);
	(*tetra)[info->count].shape[1].x += (info->j);
	(*tetra)[info->count].shape[2].y += (info->i);
	(*tetra)[info->count].shape[2].x += (info->j);
	(*tetra)[info->count].shape[3].y += (info->i);
	(*tetra)[info->count].shape[3].x += (info->j);
}

void	ft_reset_decallage(t_info *info)
{
	info->i = 0;
	info->j = 0;
}

int		ft_can_i_put(char **square, t_tetra **tetra, t_info *info)
{
	if ((CAN_I(0) == '.') && (CAN_I(1) == '.')
			&& (CAN_I(2) == '.') && (CAN_I(3) == '.'))
	{
		return (1);
	}
	else
		return (0);
}

int		ft_solve(char **square, t_tetra **tetra, t_info *info)
{
	info->i = 0;
	info->j = 0;
	while (info->count < info->nb)
	{
		if (square != NULL)
		ft_putchar((*tetra)[1].print);
		/*if (ft_can_i_put(square, tetra, info) == 1)
		{
			ft_putstr("placement\n");
			ft_put_it(square, tetra, info);
			ft_store_add(tetra, info);
			ft_reset_decallage(info);
			//info->count += 1;
			//printf("info.count = %i\n", info->count);
			ft_print_square(square, info);
			ft_putstr("erase\n");
			ft_erase_it(square, tetra, info);
			ft_print_square(square, info);
		}*/
		info->count += 1;
	}
	return (1);
}
